color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
## Where are vehicles towed to?
m <- leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-72.690940, 41.751426, zoom = 12) %>%
addCircles(lon, lat, popup=tows$Make, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
## Most common year?
years <- tows %>%
group_by(Vehicle_Year) %>%
summarise(count=n()) %>%
arrange(-count)
kable(years)
## Most common vehicle?
make <- tows %>%
group_by(Make) %>%
summarise(count=n()) %>%
arrange(-count)
kable(make)
## Most common model?
model <- tows %>%
group_by(Model) %>%
summarise(count=n()) %>%
arrange(-count)
kable(model)
## Any particular color?
color <- tows %>%
group_by(Color) %>%
summarise(count=n()) %>%
arrange(-count)
kable(color)
## Most common time of day towed?
tows$hour <- hour(tows$Time)
hour <- tows %>%
group_by(hour) %>%
summarise(count=n()) %>%
arrange(-count)
kable(hour)
ggplot(tows, aes(x=hour)) + geom_histogram(binwidth=1)
## How long are they in the tow yards for?
tows$duration <- interval(tows$created_at, tows$removed_at)
tows$days <- ddays(tows$duration)
### CANT DO THIS. DATA IS TOO DIRTY. WILL HAVE TO RECONSIDER APPROACH
## Bad-luck drivers-- who's towed more often?
plates <- tows %>%
group_by(Vehicle_Plate) %>%
summarise(count=n()) %>%
arrange(-count)
kable(plates)
## Which tow yards are most prolific?
firms <- tows %>%
group_by(Tow_Firm) %>%
summarise(count=n()) %>%
arrange(-count)
kable(firms)
## Most common address?
address <- tows %>%
group_by(Tow_From_Address) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(address, 10))
## Most common address and tow company?
tow_address <- tows %>%
group_by(Tow_From_Address, Tow_Firm) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(tow_address, 20))
tows <- read.csv("data/tows.csv", stringsAsFactors=F)
# Cleaning the data
## Figure out tow firm and address based on phone number
### Subset dataframe of complete data
tows_sub <- subset(tows, Tow_Firm!="")
tows_sub <- subset(tows_sub, !duplicated(Tow_Firm))
tows_sub <- subset(tows_sub, Tow_Firm!="CROSS COUNTRY AUTO")
nrow(tows_sub)
#### There are 21 Towing Yards in Hartford
#### Geolocate tow firms
geo <- geocode(location = tows_sub$Tow_Firm_Address, output="latlon", source="google")
tows <- read.csv("data/tows.csv", stringsAsFactors=F)
# Cleaning the data
## Figure out tow firm and address based on phone number
### Subset dataframe of complete data
tows_sub <- subset(tows, Tow_Firm!="")
tows_sub <- subset(tows_sub, !duplicated(Tow_Firm))
tows_sub <- subset(tows_sub, Tow_Firm!="CROSS COUNTRY AUTO")
nrow(tows_sub)
#### There are 21 Towing Yards in Hartford
#### Geolocate tow firms
geo <- geocode(location = tows_sub$Tow_Firm_Address, output="latlon", source="google")
tows_sub <- cbind(tows_sub, geo)
color <- data.frame("#29e908",
"#0a5cee",
"#8d480c",
"#8edeb7",
"#c9e746",
"#96bab2",
"#0fe5a2",
"#6a5c5b",
"#19cdfd",
"#279fe6",
"#7ac150",
"#660e6e",
"#095a21",
"#dfe142",
"#786839",
"#f5657c",
"#4decd2",
"#4eb06f",
"#fdc200",
"#08d479",
"#b2cca8",
"#414e75")
color <- data.frame(t(color))
rownames(color) <- NULL
tows_sub <- cbind(tows_sub, color)
#### Delete Tow_Firm and Tow_Firm_Address columns in original dataframe
tows <- tows[,-3]
tows <- tows[,-3]
#### Prep dataframe for joining
tows_sub <- tows_sub[c("Tow_Firm", "Tow_Firm_Address", "Tow_Firm_Phone", "lon", "lat", "t.color.")]
color <- data.frame("#29e908",
"#0a5cee",
"#8d480c",
"#8edeb7",
"#c9e746",
"#96bab2",
"#0fe5a2",
"#6a5c5b",
"#19cdfd",
"#279fe6",
"#7ac150",
"#660e6e",
"#095a21",
"#dfe142",
"#786839",
"#f5657c",
"#4decd2",
"#4eb06f",
"#fdc200",
"#08d479",
"#b2cca8")
color <- data.frame(t(color))
rownames(color) <- NULL
tows_sub <- cbind(tows_sub, color)
#### Delete Tow_Firm and Tow_Firm_Address columns in original dataframe
tows <- tows[,-3]
tows <- tows[,-3]
#### Prep dataframe for joining
tows_sub <- tows_sub[c("Tow_Firm", "Tow_Firm_Address", "Tow_Firm_Phone", "lon", "lat", "t.color.")]
#### Join the dataframes
tows <- left_join(tows, tows_sub)
#### Clean up time and dates
tows$Date <- ymd(tows$Date)
tows$Time <- hms(tows$Time)
tows$created_at <- ymd_hms(tows$created_at)
tows$created_at <- ymd_hms(tows$updated_at)
tows$removed_at <- ymd_hms(tows$removed_at)
#### Prepping Lat/Lon
tows$tow_lon <- gsub(",.*", "", tows$geom)
tows$tow_lat <- gsub(".*,", "", tows$geom)
# Questions to answer
## How many vehicles towed?
nrow(tows)
## How many with no vehicle plate info?
sum(is.na(tows$Vehicle_Plate))
## Where are vehicles towed from?
m <- leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-72.690940, 41.751426, zoom = 12) %>%
addCircles(~tow_lon, ~tow_lat, popup=tows$Make, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
## Where are vehicles towed to?
m <- leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-72.690940, 41.751426, zoom = 12) %>%
addCircles(lon, lat, popup=tows$Make, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
## Most common year?
years <- tows %>%
group_by(Vehicle_Year) %>%
summarise(count=n()) %>%
arrange(-count)
kable(years)
## Most common vehicle?
make <- tows %>%
group_by(Make) %>%
summarise(count=n()) %>%
arrange(-count)
kable(make)
## Most common model?
model <- tows %>%
group_by(Model) %>%
summarise(count=n()) %>%
arrange(-count)
kable(model)
## Any particular color?
color <- tows %>%
group_by(Color) %>%
summarise(count=n()) %>%
arrange(-count)
kable(color)
## Most common time of day towed?
tows$hour <- hour(tows$Time)
hour <- tows %>%
group_by(hour) %>%
summarise(count=n()) %>%
arrange(-count)
kable(hour)
ggplot(tows, aes(x=hour)) + geom_histogram(binwidth=1)
## How long are they in the tow yards for?
tows$duration <- interval(tows$created_at, tows$removed_at)
tows$days <- ddays(tows$duration)
### CANT DO THIS. DATA IS TOO DIRTY. WILL HAVE TO RECONSIDER APPROACH
## Bad-luck drivers-- who's towed more often?
plates <- tows %>%
group_by(Vehicle_Plate) %>%
summarise(count=n()) %>%
arrange(-count)
kable(plates)
## Which tow yards are most prolific?
firms <- tows %>%
group_by(Tow_Firm) %>%
summarise(count=n()) %>%
arrange(-count)
kable(firms)
## Most common address?
address <- tows %>%
group_by(Tow_From_Address) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(address, 10))
## Most common address and tow company?
tow_address <- tows %>%
group_by(Tow_From_Address, Tow_Firm) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(tow_address, 20))
View(tows)
tows <- read.csv("data/tows.csv", stringsAsFactors=F)
# Cleaning the data
## Figure out tow firm and address based on phone number
### Subset dataframe of complete data
tows_sub <- subset(tows, Tow_Firm!="")
tows_sub <- subset(tows_sub, !duplicated(Tow_Firm))
tows_sub <- subset(tows_sub, Tow_Firm!="CROSS COUNTRY AUTO")
nrow(tows_sub)
#### There are 21 Towing Yards in Hartford
#### Geolocate tow firms
geo <- geocode(location = tows_sub$Tow_Firm_Address, output="latlon", source="google")
tows_sub <- cbind(tows_sub, geo)
color <- data.frame("#29e908",
"#0a5cee",
"#8d480c",
"#8edeb7",
"#c9e746",
"#96bab2",
"#0fe5a2",
"#6a5c5b",
"#19cdfd",
"#279fe6",
"#7ac150",
"#660e6e",
"#095a21",
"#dfe142",
"#786839",
"#f5657c",
"#4decd2",
"#4eb06f",
"#fdc200",
"#08d479",
"#b2cca8")
color <- data.frame(t(color))
rownames(color) <- NULL
tows_sub <- cbind(tows_sub, color)
#### Delete Tow_Firm and Tow_Firm_Address columns in original dataframe
tows <- tows[,-3]
tows <- tows[,-3]
#### Prep dataframe for joining
View(tows_sub)
tows_sub <- tows_sub[c("Tow_Firm", "Tow_Firm_Address", "Tow_Firm_Phone", "lon", "lat", "t.color.")]
tows <- left_join(tows, tows_sub)
tows$Date <- ymd(tows$Date)
tows$Time <- hms(tows$Time)
tows$created_at <- ymd_hms(tows$created_at)
tows$created_at <- ymd_hms(tows$updated_at)
tows$removed_at <- ymd_hms(tows$removed_at)
#### Prepping Lat/Lon
tows$tow_lon <- gsub(",.*", "", tows$geom)
tows$tow_lat <- gsub(".*,", "", tows$geom)
nrow(tows)
sum(is.na(tows$Vehicle_Plate))
m <- leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-72.690940, 41.751426, zoom = 12) %>%
addCircles(~tow_lon, ~tow_lat, popup=tows$Make, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
m <- leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-72.690940, 41.751426, zoom = 12) %>%
addCircles(lon, lat, popup=tows$Make, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
m <- leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-72.690940, 41.751426, zoom = 12) %>%
addCircles(~lon, ~lat, popup=tows$Make, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
years <- tows %>%
group_by(Vehicle_Year) %>%
summarise(count=n()) %>%
arrange(-count)
kable(years)
kable(head(years,10)
kable(head(years,10))
## Most common vehicle?
kable(head(years,10))
make <- tows %>%
group_by(Make) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(make))
kable(head(model,10)
)
kable(head(model,10))
kable(head(color,10))
color <- tows %>%
group_by(Color) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(color,10))
kable(head(hour,2))
kable(head(hour,10))
ggplot(tows, aes(x=hour)) + geom_histogram(binwidth=1)
head(tows)
head(tows$hour)
tows$hour <- hour(tows$Time)
hour <- tows %>%
group_by(hour) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(hour,10))
ggplot(tows, aes(x=hour)) + geom_histogram(binwidth=1)
tows$duration <- interval(tows$created_at, tows$removed_at)
tows$days <- ddays(tows$duration)
plates <- tows %>%
group_by(Vehicle_Plate) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(plates,10))
sum(is.na(tows$Vehicle_Plate))
nrow(subset(tows, Vehicle_Plate==""))
nrow(subset(tows, Vehicle_Plate=="NA"))
kable(head(firms,10))
View(firms)
View(tows)
tows %>%
group_by(Tow_Firm) %>%
summarise(count=n()) %>%
arrange(-count)
firms <- tows %>%
group_by(Tow_Firm) %>%
summarise(count=n()) %>%
arrange(-count)
firms
kable(head(firms,10))
address <- tows %>%
group_by(Tow_From_Address) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(address, 10))
tow_address <- tows %>%
group_by(Tow_From_Address, Tow_Firm) %>%
summarise(count=n()) %>%
arrange(-count)
kable(head(tow_address, 20))
m <- leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-72.690940, 41.751426, zoom = 12) %>%
addCircles(~tow_lon, ~tow_lat, popup=tows$Tow_Firm, weight = 3, radius=40,
color=tows$t.color., stroke = TRUE, fillOpacity = 0.8) %>%
addLegend("bottomright", colors= "#ffa500", labels="Towed'", title="In Hartford")
m
require(rgdal)
# dsn is the folder the shape files are in. layer is the name of the file.
towntracts <- readOGR(dsn="maps", layer="census_tracts")
# creating a copy
towntracts_only <- towntracts
# turn the shapefile into a dataframe that can be worked on in R
require(maptools)
require(ggplot2)
towntracts <- fortify(towntracts, region="GEOID10")
# We only need the columns with the latitude and longitude
coords <- tows[c("tow_lon", "tow_lat")]
# Making sure we are working with rows that don't have any blanks
coords$tow_lon <- as.numeric(coords$tow_lon)
coords$tow_lat <- as.numeric(coords$tow_lat)
coords <- coords[complete.cases(coords),]
library(sp)
# Letting R know that these are specifically spatial coordinates
sp <- SpatialPoints(coords)
# Applying projections to the coordinates so they match up with the shapefile we're joining them with
# More projections information http://trac.osgeo.org/proj/wiki/GenParms
proj4string(sp) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
proj4string(sp)
# Rendering the census tracts
plot(towntracts_only)
# Adding the coordinates of the traffic stops
plot(sp, col="red" , add=TRUE)
by_tract <- over(sp, towntracts_only)
by_tract <- by_tract %>%
group_by(GEOID10) %>%
summarise(total=n())
kable(head(by_tract))
colnames(by_tract) <- c("id", "total")
by_tract$id <- as.character(by_tract$id)
# Bring in a dataframe that has matches census tract ID numbers to town names
tracts2towns <- read.csv("data/tracts_to_towns.csv", stringsAsFactors=FALSE)
# Changing the column names so it can be joined to the by_tract dataframe
colnames(tracts2towns) <- c("id", "town_name")
# Changing the GEOID number to character so it can be joined to the by_tract dataframe
tracts2towns$id <- as.character(tracts2towns$id)
# Adding a 0 to the front of the GEOID string because it was originally left out when it was imported
tracts2towns$id <- paste0("0", tracts2towns$id)## Distance between yards and tow locations?
# Eliminating leading and trailing white space just in case
tracts2towns$town_name <- str_trim(tracts2towns$town_name)
# Joining the by_tract dataframe to the tracts2towns dataframe
by_tract <- left_join(by_tract, tracts2towns)
total_map <- left_join(towntracts, by_tract)
require(ggmap)
require(scales)
total_map <- subset(total_map, !is.na(total))
tm_ct <- ggplot() +
geom_polygon(data = total_map, aes(x=long, y=lat, group=group, fill=total), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Reds", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Where vehicles are towed from", fill="")
print(tm_ct)
tows$lat <- as.numeric(tows$lat)
tows$lon <- as.numeric(tows$lon)
tows$tow_lat <- as.numeric(tows$tow_lat)
tows$tow_lon <- as.numeric(tows$tow_lon)
tows_no_na <- subset(tows, !is.na(tow_lat))
tows_no_na$distance <- distm(c(tows_no_na$lat, tows_no_na$lon), c(tows_no_na$tow_lat, tows_no_na$tow_lon), fun=distHaversine)
View(tows_no_na)
strtows_no_na$lat
str(tows_no_na$lat)
str(tows_no_na$lon)
str(tows_no_na$tow_lon)
str(tows_no_na$tow_lat)
tows$t_lonlat <- paste(tows$tow_lat, tows$tow_lon)
tows$lonlat <- paste(tows$lat, tows$lon)
View(tows)
tows_no_na$distance <- distm(tows$lonlat, tows$t_lonlat, fun=distHaversine)
tows_no_na$distance <- distm(lonlat, t_lonlat, fun=distHaversine)
tows$
tows_no_na$distance <- distm(tows$lonlat, tows$t_lonlat, fun=distHaversine)
tows_no_na$distance <- distm(tows$lonlat, tows$t_lonlat, fun=distHaversine)
tows$lonlat <- paste0(tows$lat, ", ", tows$lon)
tows$t_lonlat <- paste0(tows$tow_lat, ", ", tows$tow_lon)
tows_no_na$distance <- distm(tows$lonlat, tows$t_lonlat, fun=distHaversine)
View(tows)
distm(c(-0.129581, 51.516578), c(-0.129581, 51.516578), fun=distHaversine)
distm(tows$lonlat, c(-0.129581, 51.516578), fun=distHaversine)
tows_no_na$distance <- distm(c(tows_no_na$lat, tows_no_na$lon), c(tows_no_na$tow_lat, tows_no_na$tow_lon), fun=distHaversine)
tows_no_na$lat
tows_no_na$lon
tows_no_na$tow_lat
tows_no_na$tow_lon
distm(c(tows_no_na$lat, tows_no_na$lon), c(-0.129581, 51.516578), fun=distHaversine)
tows_no_na$distance <- distm(c(tows_no_na$lat, tows_no_na$lon), c(tows_no_na$tow_lat, tows_no_na$tow_lon), fun=distHaversine)
distm(c(tows_no_na$lat[1], tows_no_na$lon[1]), c(-0.129581, 51.516578), fun=distHaversine)
tows_no_na$distance <- 0
for (i in 1:nrow(tows_no_na)) {
tows_no_na$distance <- distm(c(tows_no_na$lat[i], tows_no_na$lon[i]), c(tows_no_na$tow_lat[i], tows_no_na$tow_lon[i]), fun=distHaversine)
}
for (i in 1:nrow(tows_no_na)) {
tows_no_na$distance[i] <- distm(c(tows_no_na$lat[i], tows_no_na$lon[i]), c(tows_no_na$tow_lat[i], tows_no_na$tow_lon[i]), fun=distHaversine)
}
View(tows)
View(tows_no_na)
tows_no_na$miles <- tows_no_na$distance * 0.00062137
View(tows_no_na)
avg_miles <- tows_no_na %>%
group_by(Tow_Firm) %>%
summarise(Avg_Miles=mean(distance))
avg_miles <- tows_no_na %>%
group_by(Tow_Firm) %>%
summarise(Avg_Miles=mean(distance)) %>%
arrange(-distance)
avg_miles <- tows_no_na %>%
group_by(Tow_Firm) %>%
summarise(Avg_Miles=mean(distance)) %>%
arrange(-Avg_Miles)
View(avg_miles)
avg_miles <- tows_no_na %>%
group_by(Tow_Firm) %>%
summarise(Avg_Meters=mean(distance)) %>%
mutate(Avg_Miles=Avg_Meters*0.00062137)
arrange(-Avg_Miles)
avg_miles <- tows_no_na %>%
group_by(Tow_Firm) %>%
summarise(Avg_Meters=mean(distance)) %>%
mutate(Avg_Miles=Avg_Meters*0.00062137) %>%
arrange(-Avg_Miles)
avg_miles
