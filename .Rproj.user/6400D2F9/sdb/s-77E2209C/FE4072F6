{
    "collab_server" : "",
    "contents" : "---\ntitle: \"towing analysis\"\nauthor: \"Andrew Ba Tran\"\ndate: \"August 31, 2016\"\noutput: html_document\n---\n\n# The towed in Hartford\n\nLooking \n\n```{r setup, warning=FALSE, message=FALSE}\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(leaflet)\nlibrary(ggmap)\nlibrary(knitr)\nlibrary(stringr)\nlibrary(geosphere)\nlibrary(ggplot2)\nrequire(ggmap)\nrequire(scales)\nlibrary(sp)\nrequire(rgdal)\nrequire(maptools)\n\n#install.packages(\"devtools\")\n#devtools::install_github(\"hrecht/censusapi\")\nlibrary(\"censusapi\")\n```\n\n```{r loading_data}\ntows <- read.csv(\"data/tows.csv\", stringsAsFactors=F)\n```\n\n### Cleaning and prepping the data\n\n```{r cleaning, warning=FALSE, message=FALSE}\n\n## There are many blank fields in the Tow Firm and Address column\n## There are no blank fields in the phone number column\n## So let's figure out tow firm name and address based on phone number\n\n### Subset dataframe of complete data\ntows_sub <- subset(tows, Tow_Firm!=\"\")\ntows_sub <- subset(tows_sub, !duplicated(Tow_Firm))\n\n# Getting rid of one of the tow firm names who used a phone number but two different names\ntows_sub <- subset(tows_sub, Tow_Firm!=\"CROSS COUNTRY AUTO\")\n\n\n#### Geolocate tow firms\ngeo <- geocode(location = tows_sub$Tow_Firm_Address, output=\"latlon\", source=\"google\")\ntows_sub <- cbind(tows_sub, geo)\n\n#### An array of 21 colors just for fun\ncolor <- data.frame(\"#29e908\", \n                     \"#0a5cee\", \n                     \"#8d480c\", \n                     \"#8edeb7\", \n                     \"#c9e746\", \n                     \"#96bab2\", \n                     \"#0fe5a2\", \n                     \"#6a5c5b\", \n                     \"#19cdfd\", \n                     \"#279fe6\", \n                     \"#7ac150\", \n                     \"#660e6e\", \n                     \"#095a21\", \n                     \"#dfe142\", \n                     \"#786839\", \n                     \"#f5657c\", \n                     \"#4decd2\", \n                     \"#4eb06f\", \n                     \"#fdc200\", \n                     \"#08d479\", \n                     \"#b2cca8\")\ncolor <- data.frame(t(color))\nrownames(color) <- NULL\n\n#### Adding the colors to the tow firm name dataframe\ntows_sub <- cbind(tows_sub, color)\n\n#### Delete Tow_Firm and Tow_Firm_Address columns in original dataframe\ntows <- tows[,-3]\ntows <- tows[,-3]\n\n#### Prep dataframe for joining\ntows_sub <- tows_sub[c(\"Tow_Firm\", \"Tow_Firm_Address\", \"Tow_Firm_Phone\", \"lon\", \"lat\", \"t.color.\")]\n\n#### Join the dataframes\ntows <- left_join(tows, tows_sub)\n\n#### Clean up time and dates\ntows$Date <- ymd(tows$Date)\ntows$Time <- hms(tows$Time)\ntows$created_at <- ymd_hms(tows$created_at)\ntows$created_at <- ymd_hms(tows$updated_at)\ntows$removed_at <- ymd_hms(tows$removed_at)\n\n\n#### Prepping Lat/Lon\ntows$tow_lon <- gsub(\",.*\", \"\", tows$geom)\ntows$tow_lat <- gsub(\".*,\", \"\", tows$geom)\n```\n\n## Exploring the data\n\nAbout `r nrow(tows)` vehicles have been towed in Hartford since 2015.\n\nThere are `r nrow(tows_sub)` towing companies in the city.\n\n`r nrow(subset(tows, Vehicle_Plate==\"\"))` vehicles had no license plate listed.\n\n## Where are the vehicles towed from?\n\n```{r towed_at, message=F, warning=F, fig.width=9, fig.height=5}\n\nleaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>') %>% \n  setView(-72.690940, 41.751426, zoom = 12) %>% \n  addCircles(~tow_lon, ~tow_lat, popup=tows$Make, weight = 3, radius=40, \n             color=\"#ffa500\", stroke = TRUE, fillOpacity = 0.8) %>% \n  addLegend(\"bottomright\", colors= \"#ffa500\", labels=\"Towed'\", title=\"In Hartford\")\n\n```\n\n## Where are vehicles towed to?\n\n```{r towed_to, message=F, warning=F, fig.width=9, fig.height=5}\n\n\n\nhartbox <- make_bbox(lon = tows$tow_lon, lat =tows$tow_lat, f = .2)\nhart_map <- get_map(location = \"Hartford\", zoom=12, maptype = \"roadmap\", source = \"google\")\n\ntownborders <- readOGR(dsn=\"maps\", layer=\"ctgeo\")\ntownborders_only <- townborders\ntownborders<- fortify(townborders, region=\"NAME10\")\n\n# Subset the town borders to just Hamden since that's the department we're looking at\ntown_borders <- subset(townborders, id==\"Hartford\")\n\ntm_ct <- ggmap(hart_map) +\n  geom_point(data=tows, aes(x=lon, y=lat), color=\"red\", size=5, alpha=0.5) +\n  #geom_polygon(data = total_map, aes(x=long, y=lat, group=group, fill=total), color = \"black\", size=0.2) +\n  geom_polygon(data = town_borders, aes(x=long, y=lat, group=group, fill=total), color = \"black\", fill=NA, size=0.5) +\n  coord_map() +\n  scale_fill_distiller(type=\"seq\", trans=\"reverse\", palette = \"Reds\", breaks=pretty_breaks(n=10)) +\n  theme_nothing(legend=TRUE) +\n  labs(title=\"Where vehicles are towed to\", fill=\"\")\nprint(tm_ct)\n\n# \n# leaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>') %>% \n#   setView(-72.690940, 41.751426, zoom = 12) %>% \n#   addCircles(~lon, ~lat, popup=tows$Make, weight = 3, radius=40, \n#              color=\"#ffa500\", stroke = TRUE, fillOpacity = 0.8) %>% \n#   addLegend(\"bottomright\", colors= \"#ffa500\", labels=\"Towed'\", title=\"In Hartford\")\n\n\n```\n\n## Most common year?\n\n```{r year}\nyears <- tows %>%\n  group_by(Vehicle_Year) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(years,10))\n```\n\n## Most common vehicle?\n\n```{r make}\nmake <- tows %>%\n  group_by(Make) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(make, 10))\n```\n\n\n## Most common model? \n```{r model}\nmodel <- tows %>%\n  group_by(Model) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(model,10))\n```\n\n## Any particular color? \n\n```{r color}\ncolor <- tows %>%\n  group_by(Color) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(color,10))\n```\n\n\n## Most common time of day towed?\n\n```{r hour, fig.width=9, fig.height=5}\ntows$hour <- hour(tows$Time)\n\nhour <- tows %>%\n  group_by(hour) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(hour,10))\n\nggplot(tows, aes(x=hour)) + geom_histogram(binwidth=1)\n```\n\n## Bad-luck drivers-- who's towed more often?\n\n```{r bad_luck}\nplates <- tows %>%\n  group_by(Vehicle_Plate) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(plates,10))\n```\n\n## Which tow yards are most prolific?\n\n```{r prolific}\n\nfirms <- tows %>%\n  group_by(Tow_Firm) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(firms,10))\n\n```\n\n## Most common address?\n\n```{r address}\naddress <- tows %>%\n  group_by(Tow_From_Address) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(address, 10))\n```\n\n\n## Most common address targeted by tow companies?\n\n```{r tow_address}\ntow_address <- tows %>%\n  group_by(Tow_From_Address, Tow_Firm) %>%\n  summarise(count=n()) %>%\n  arrange(-count)\n\nkable(head(tow_address, 20))\n```\n\n\n## Where do these tow yards target?\n\n```{r target, fig.height=9, fig.width=5}\nleaflet(tows) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>') %>% \n  setView(-72.690940, 41.751426, zoom = 12) %>% \n  addCircles(~tow_lon, ~tow_lat, popup=tows$Tow_Firm, weight = 3, radius=40, \n             color=tows$t.color., stroke = TRUE, fillOpacity = 0.8) %>% \n  addLegend(\"bottomright\", colors= \"#ffa500\", labels=\"Towed'\", title=\"In Hartford\")\n\n```\n\n## What neighborhoods? \n\n```{r neighborhoods, fig.height=6, fig.width=9, warning=F, message=F}\n\n# Bring in the shape files for census tracts\n\n# dsn is the folder the shape files are in. layer is the name of the file.\ntowntracts <- readOGR(dsn=\"maps\", layer=\"census_tracts\")\n\n# creating a copy\ntowntracts_only <- towntracts\n\n# turn the shapefile into a dataframe that can be worked on in R\n\ntowntracts <- fortify(towntracts, region=\"GEOID10\")\n\n# We only need the columns with the latitude and longitude\ncoords <- tows[c(\"tow_lon\", \"tow_lat\")]\n\n# Making sure we are working with rows that don't have any blanks\ncoords$tow_lon <- as.numeric(coords$tow_lon)\ncoords$tow_lat <- as.numeric(coords$tow_lat)\ncoords <- coords[complete.cases(coords),]\n\n# Letting R know that these are specifically spatial coordinates\nsp <- SpatialPoints(coords)\n\n# Applying projections to the coordinates so they match up with the shapefile we're joining them with\n# More projections information http://trac.osgeo.org/proj/wiki/GenParms \nproj4string(sp) <- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\nproj4string(sp)\n\n# Rendering the census tracts\nplot(towntracts_only)\n\n# Adding the coordinates of the traffic stops\nplot(sp, col=\"red\" , add=TRUE)\n\nby_tract <- over(sp, towntracts_only)\n\nby_tract <- by_tract %>%\n  group_by(GEOID10) %>%\n  summarise(total=n())\n\ncolnames(by_tract) <- c(\"id\", \"total\")\n\nby_tract$id <- as.character(by_tract$id)\n\n# Bring in a dataframe that has matches census tract ID numbers to town names\ntracts2towns <- read.csv(\"data/tracts_to_towns.csv\", stringsAsFactors=FALSE)\n\n# Changing the column names so it can be joined to the by_tract dataframe\ncolnames(tracts2towns) <- c(\"id\", \"town_name\")\n\n# Changing the GEOID number to character so it can be joined to the by_tract dataframe\ntracts2towns$id <- as.character(tracts2towns$id)\n\n# Adding a 0 to the front of the GEOID string because it was originally left out when it was imported\ntracts2towns$id <- paste0(\"0\", tracts2towns$id)## Distance between yards and tow locations?\n\n# Eliminating leading and trailing white space just in case\ntracts2towns$town_name <- str_trim(tracts2towns$town_name)\n\n# Joining the by_tract dataframe to the tracts2towns dataframe\n\nby_tract <- left_join(by_tract, tracts2towns)\n\ntotal_map <- left_join(towntracts, by_tract)\n\ntotal_map <- subset(total_map, !is.na(total))\n\ntm_ct <- ggplot() +\n  geom_polygon(data = total_map, aes(x=long, y=lat, group=group, fill=total), color = \"black\", size=0.2) +\n  geom_polygon(data = town_borders, aes(x=long, y=lat, group=group, fill=total), color = \"black\", fill=NA, size=0.5) +\n  coord_map() +\n  scale_fill_distiller(type=\"seq\", trans=\"reverse\", palette = \"Reds\", breaks=pretty_breaks(n=10)) +\n  theme_nothing(legend=TRUE) +\n  labs(title=\"Where vehicles are towed from\", fill=\"\")\nprint(tm_ct)\n```\n\n## Compared to census data\n\n```{r population, fig.height=6, fig.width=9, warning=F, message=F}\n\n# Loading my census key from an external script\nsource(\"keys.R\")\n\n# Replace census_key below with \"your_own_key_whatever_it_is\"\n# Apply for one here http://api.census.gov/data/key_signup.html\n\nrace_tracts <- getCensus(name=\"acs5\",\n                         vintage=2014,\n                         key=census_key,\n                         vars=c(\"NAME\", \"B02001_001E\", \"B02001_002E\"),\n                         region=\"tract:*\", regionin=\"state:09\")\n\n# What did we just do?\n\n\n\n# I pulled the following population data for all census tracts in state 09, which is Connecticut\n\n# B02001_001E - Total\n# B02001_002E - White alone\n\n# ok, let's clean this up\nrace_tracts$NAME <- NULL\n\n# Creating a new column for the GEOID that can be joined with the dataframe we already have\nrace_tracts$id <- paste0(race_tracts$state, race_tracts$county, race_tracts$tract)\n\n# Renaming the column names for clarity\ncolnames(race_tracts) <- c(\"state_code\", \"county_code\", \"tract_code\", \"total_pop\", \"white_pop\", \"id\")\n\n# Determining the minority population by subtracting the white population from the total\nrace_tracts$minority_pop <- race_tracts$total_pop - race_tracts$white_pop\n\n# Now figuring out the percent makeup of each census tract\nrace_tracts$white_pop_p <- round(race_tracts$white_pop/race_tracts$total_pop*100,2)\nrace_tracts$minority_pop_p <- round(race_tracts$minority_pop/race_tracts$total_pop*100,2)\n\n# Joining the two datframes\njoined_tracts <- left_join(total_map, race_tracts)\n\n\n# Mapping population\n\ntm_ct <- ggplot() +\n  geom_polygon(data = joined_tracts, aes(x=long, y=lat, group=group, fill=total_pop), color = \"black\", size=0.2) +\n  geom_polygon(data = town_borders, aes(x=long, y=lat, group=group, fill=total), color = \"black\", fill=NA, size=0.5) +\n  coord_map() +\n  scale_fill_distiller(type=\"seq\", trans=\"reverse\", palette = \"Reds\", breaks=pretty_breaks(n=10)) +\n  theme_nothing(legend=TRUE) +\n  labs(title=\"Hartford population\", fill=\"\")\nprint(tm_ct)\n\n\n# Minority pop\n\ntm_ct <- ggplot() +\n  geom_polygon(data = joined_tracts, aes(x=long, y=lat, group=group, fill=minority_pop_p), color = \"black\", size=0.2) +\n  geom_polygon(data = town_borders, aes(x=long, y=lat, group=group, fill=total), color = \"black\", fill=NA, size=0.5) +\n  coord_map() +\n  scale_fill_distiller(type=\"seq\", trans=\"reverse\", palette = \"Reds\", breaks=pretty_breaks(n=10)) +\n  theme_nothing(legend=TRUE) +\n  labs(title=\"Hartford minority population\", fill=\"\")\nprint(tm_ct)\n```\n\n### No correlation between population overall or minority population\n\n## How about restaurants?\n\n```{r restaurants, fig.height=6, fig.width=9, warning=F, message=F}\n# Downloading the data from the Hartford City Data Portal\n\nrestaurants2 <- read.csv(\"https://data.hartford.gov/api/views/cwxs-2pd8/rows.csv?accessType=DOWNLOAD\")\n\n\nrestaurants2$lon <- gsub(\".*, \", \"\", restaurants2$geom)\nrestaurants2$lon <- as.numeric(gsub(\"\\\\)\", \"\", restaurants2$lon))\n\n\nrestaurants2$lat <- gsub(\",.*\", \"\", restaurants2$geom)\nrestaurants2$lat <- as.numeric(gsub(\"\\\\(\", \"\", restaurants2$lat))\n\ncoords <- restaurants2[c(\"lon\", \"lat\")]\n\ncoords <- coords[complete.cases(coords),]\nsp <- SpatialPoints(coords)\nproj4string(sp) <- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\nproj4string(sp)\n\nby_tract <- over(sp, towntracts_only)\n\nby_tract <- by_tract %>%\n  group_by(GEOID10) %>%\n  summarise(total=n())\n\ncolnames(by_tract) <- c(\"id\", \"total\")\n\nby_tract$id <- as.character(by_tract$id)\n\ntracts2towns <- read.csv(\"data/tracts_to_towns.csv\", stringsAsFactors=FALSE)\n\ncolnames(tracts2towns) <- c(\"id\", \"town_name\")\n\ntracts2towns$id <- as.character(tracts2towns$id)\n\ntracts2towns$id <- paste0(\"0\", tracts2towns$id)## Distance between yards and tow locations?\n\ntracts2towns$town_name <- str_trim(tracts2towns$town_name)\n\nby_tract <- left_join(by_tract, tracts2towns)\n\ntotal_map <- left_join(towntracts, by_tract)\n\n\ntotal_map <- subset(total_map, !is.na(total))\n\ntm_ct <- ggplot() +\n  geom_polygon(data = total_map, aes(x=long, y=lat, group=group, fill=total), color = \"black\", size=0.2) +\n  coord_map() +\n  scale_fill_distiller(type=\"seq\", trans=\"reverse\", palette = \"Reds\", breaks=pretty_breaks(n=10)) +\n  theme_nothing(legend=TRUE) +\n  labs(title=\"Where restaurants are\", fill=\"\")\nprint(tm_ct)\n```\n\n## What's the average distance for tows per towing company?\n\n```{r distance}\n\ntows$lat <- as.numeric(tows$lat)\ntows$lon <- as.numeric(tows$lon)\ntows$tow_lat <- as.numeric(tows$tow_lat)\ntows$tow_lon <- as.numeric(tows$tow_lon)\n\n# tows$lonlat <- paste0(tows$lat, \", \", tows$lon)\n# tows$t_lonlat <- paste0(tows$tow_lat, \", \", tows$tow_lon)\n\ntows_no_na <- subset(tows, !is.na(tow_lat))\n\ntows_no_na$distance <- 0\n\nfor (i in 1:nrow(tows_no_na)) {\n  tows_no_na$distance[i] <- distm(c(tows_no_na$lat[i], tows_no_na$lon[i]), c(tows_no_na$tow_lat[i], tows_no_na$tow_lon[i]), fun=distHaversine)\n}\n\ntows_no_na$miles <- tows_no_na$distance * 0.00062137\n\n## average miles per firm\n\navg_miles <- tows_no_na %>%\n  group_by(Tow_Firm) %>%\n  summarise(Avg_Meters=mean(distance)) %>%\n  mutate(Avg_Miles=Avg_Meters*0.00062137) %>%\n  arrange(-Avg_Miles)\n\nkable(avg_miles)\n```\n\n## Heatmap\n\n```{r heatmap1, fig.height=6, fig.width=9, warning=F, message=F}\n\njoined_tracts2 <- subset(joined_tracts, town_name==\"Hartford\")\n\npm_ct <- ggmap(hart_map) \npm_ct <- pm_ct + stat_density2d(data = tows_no_na, show.legend=F, aes(x=tow_lon, y=tow_lat, fill=..level.., alpha=..level..),  geom=\"polygon\",size=.5,bins=10)\npm_ct <- pm_ct + scale_fill_gradient(low=\"purple\", high=\"firebrick1\", name=\"Distribution\")\npm_ct <- pm_ct + coord_fixed()\npm_ct <- pm_ct + theme_nothing(legend=TRUE) \npm_ct <- pm_ct + labs(x=NULL, y=NULL, title=\"Where tow yards target\")\npm_ct <- pm_ct + theme(plot.title=element_text(face=\"bold\", hjust=.4))\npm_ct <- pm_ct + theme(plot.subtitle=element_text(face=\"italic\", size=9, margin=margin(l=20)))\npm_ct <- pm_ct + theme(plot.caption=element_text(size=12, margin=margin(t=12), color=\"#7a7d7e\", hjust=0))\n\nprint(pm_ct)\n\n```\n\n## Heatmap per towing company\n\n```{r heatmap2, fig.height=12, fig.width=9, warning=F, message=F}\n\npm_ct <- ggmap(hart_map)\npm_ct <- pm_ct + stat_density2d(data = tows_no_na, show.legend=F, aes(x=tow_lon, y=tow_lat, fill=..level.., alpha=..level..),  geom=\"polygon\",size=.5,bins=10)\npm_ct <- pm_ct + geom_polygon(data = joined_tracts2, aes(x=long, y=lat, group=group), fill=NA, color = \"black\", size=0.2) \npm_ct <- pm_ct + geom_polygon(data = town_borders, aes(x=long, y=lat, group=group), fill=NA, color = \"black\", size=0.4)\n#pm_ct <- pm_ct + geom_polygon(data = ct_only, aes(x=long, y=lat, group=group), fill=\"seagreen2\", color = \"gray93\", size=0.2)\n#pm_ct <- pm_ct + gg_circle(r=9, xc=-73, yc=42, color=\"white\", fill=NA, alpha=0.2, size=40) \npm_ct <- pm_ct + scale_fill_gradient(low=\"deepskyblue2\", high=\"firebrick1\", name=\"Distribution\")\n#pm_ct <- pm_ct + scale_fill_discrete()\n#extra_lat <- c(46.358685, 35.872715)\n#extra_lon <- c(-64.209938, -79.735653)\n#pm_ct <- pm_ct + theme(legend.position=\"top\",  legend.key = element_blank())\npm_ct <- pm_ct + coord_fixed()\npm_ct <- pm_ct + theme_nothing(legend=TRUE) \npm_ct <- pm_ct + labs(x=NULL, y=NULL, title=\"Where tow yards target\")\npm_ct <- pm_ct + facet_wrap(~Tow_Firm)\n#pm_ct <- pm_ct + theme(text = element_text(size=15), panel.background = element_rect(fill = 'gray93', color=NA))\npm_ct <- pm_ct + theme(plot.title=element_text(face=\"bold\", hjust=.4))\npm_ct <- pm_ct + theme(plot.subtitle=element_text(face=\"italic\", size=9, margin=margin(l=20)))\npm_ct <- pm_ct + theme(plot.caption=element_text(size=12, margin=margin(t=12), color=\"#7a7d7e\", hjust=0))\n#pm_ct <- pm_ct + theme(legend.key.size = unit(1, \"cm\"))\n\nprint(pm_ct)",
    "created" : 1472671602633.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "843693386",
    "id" : "FE4072F6",
    "lastKnownWriteTime" : 1472682811,
    "last_content_update" : 1472682811771,
    "path" : "~/Documents/Github/tow_hartford/index.Rmd",
    "project_path" : "index.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 18,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}